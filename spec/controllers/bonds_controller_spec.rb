require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BondsController, :type => :controller do
  include Devise::TestHelpers

  let(:user) { FactoryGirl.create(:user) }
  let(:bond) { FactoryGirl.create(:bond) }
  let(:valid_attributes) { { name: "algo" } }
  let(:invalid_attributes) { { name: nil } }

  describe "GET index" do
    it "assigns all bonds as @bonds" do
      sign_in user
      get :index, {}
      expect(assigns(:bonds)).to eq([bond])
    end
  end

  describe "GET show" do
    it "assigns the requested bond as @bond" do
      sign_in user
      get :show, {:id => bond.id}
      expect(assigns(:bond)).to eq(bond)
    end
  end

  describe "GET new" do
    it "assigns a new bond as @bond" do
      sign_in user
      get :new, {}
      expect(assigns(:bond)).to be_a_new(Bond)
    end
  end

  describe "GET edit" do
    it "assigns the requested bond as @bond" do
      sign_in user
      get :edit, {:id => bond.id}
      expect(assigns(:bond)).to eq(bond)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      before do
        sign_in user
      end
      it "creates a new Bond" do
        expect {
          post :create, {:bond => { name: "algo" }}
        }.to change(Bond, :count).by(1)
      end

      it "assigns a newly created bond as @bond" do
        post :create, {:bond => valid_attributes}
        expect(assigns(:bond)).to be_a(Bond)
        expect(assigns(:bond)).to be_persisted
      end

      it "redirects to the created bond" do
        post :create, {:bond => valid_attributes}
        expect(response).to redirect_to(Bond.last)
      end
    end

    describe "with invalid params" do
      before do
        sign_in user
      end
      it "assigns a newly created but unsaved bond as @bond" do
        post :create, {:bond => invalid_attributes}
        expect(assigns(:bond)).to be_a_new(Bond)
      end

      it "re-renders the 'new' template" do
        post :create, {:bond => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      before do
        sign_in user
      end
      let(:new_attributes) { { name: 'algo2' } }

      it "updates the requested bond" do
        put :update, {:id => bond.id, :bond => new_attributes}
        bond.reload
        expect(bond.name).to eq('algo2')
      end

      it "assigns the requested bond as @bond" do
        put :update, {:id => bond.id, :bond => valid_attributes}
        expect(assigns(:bond)).to eq(bond)
      end

      it "redirects to the bond" do
        put :update, {:id => bond.id, :bond => valid_attributes}
        expect(response).to redirect_to(bond)
      end
    end

    describe "with invalid params" do
      before do
        sign_in user
      end

      it "assigns the bond as @bond" do
        put :update, {:id => bond.id, :bond => invalid_attributes}
        expect(assigns(:bond)).to eq(bond)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => bond.id, :bond => invalid_attributes}
        expect(response).to render_template("edit")
      end

    end
  end

  describe "DELETE destroy" do
    before do
        sign_in user
    end

    it "destroys the requested bond" do
      expect {
        delete :destroy, {:id => bond.id}
      }.to change(Bond, :count).by(0)
    end

    it "redirects to the bonds list" do
      delete :destroy, {:id => bond.id}
      expect(response).to redirect_to(bonds_url)
    end


  end


end
